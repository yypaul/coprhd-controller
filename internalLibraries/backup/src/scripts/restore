#!/bin/bash
# Copyright (c) 2014 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#

DIR="$(dirname $0)"
DIR="$(readlink -f $DIR)"

. ${DIR}/restore-libs.sh

#This script is used to help user to restore a backupset simply
usage() {
    echo "Usage:"
    echo "       $0 <Backup Zip File> | <Local Backup Dir>"
    echo "For example:"
    echo "       $0 /tmp/test.zip or $0 /data/backup/some-backup-dir"
    echo "NOTE: restore on standby site is not supported."
}

validate_parameters() {
    if [ -d "${RESTORE_ORIGIN}" ]; then
        if [[ $(is_local_backup "${RESTORE_ORIGIN}") == "false" ]]; then
            echo "The ${RESTORE_ORIGIN} is not a local backup"
            exit 3
        fi
    elif [ ! -f "${RESTORE_ORIGIN}" ]; then
        echo "${RESTORE_ORIGIN} not exist"
        exit 2
    fi

    echo "This operation will erase existing db and zk data from the cluster."
    user_confirm "Are you sure you want to continue?"
}

upload_backup() {
    if [[ "$(is_local_backup ${RESTORE_ORIGIN})" == "true" ]] ; then
        echo "This is a local backup, no need to upload to other nodes"
        return
    fi

    echo -n "Uploading backup files to all nodes ... "
    create_restore_folder
    extract_backup_files
    copy_to_other_nodes
    echo "done"
}

input_password() {
    while true; do
        read -p "Please input cluster password for root user: " -s ROOT_PASSWORD; echo ""
        
        check_password ${ROOT_PASSWORD}
        if [[ $? -eq 0 ]] ; then
            break;
        fi

        echo "Password is incorrect."
    done
}

create_restore_folder() {
    local command="mkdir -p $RESTORE_DIR"
    loop_execute "${command}" "true"
}

extract_backup_files() {
    cd ${RESTORE_DIR}
    unzip "${RESTORE_ORIGIN}" >/dev/null

    is_vdc_connected ${RESTORE_DIR}

    validate_backup_files
}

validate_backup_files() {
    local geodb_files=($(ls -f *geodb*.zip))
    local fileNodeCount=${#geodb_files[@]}

    BACKUP_NODE_COUNT=$((`grep -o "," ${RESTORE_DIR}/*_info.properties | wc -l` + 1))
    if [ ${fileNodeCount} -eq 0 ]; then
        echo -e "\nCan't find valid backup files under $RESTORE_DIR, exiting.."
        exit 2
    elif [ ${fileNodeCount} -lt $[ $BACKUP_NODE_COUNT / 2 + 1 ] ]; then
        echo -e -n "\nThis backupset is invalid, "
        check_if_force_restore "force restore may still be failed."
    elif [ ${fileNodeCount} -lt $BACKUP_NODE_COUNT ]; then
        echo -n "WARNING: This is an incomplete backupset.."
        if [ $NODE_COUNT != $BACKUP_NODE_COUNT ]; then
            echo -e -n "\nCluster nodes count can't change in restoring with incomplete backupset, "
            check_if_force_restore "force restore may still be failed."
        fi
    elif [ ${fileNodeCount} -eq $BACKUP_NODE_COUNT ]; then
        if [ $NODE_COUNT -lt $[ $BACKUP_NODE_COUNT / 2 + 1 ] ]; then
            echo -e -n "\nNodes count of cluster to be restored should not be less than quorum nodes count of cluster taken backup, "
            check_if_force_restore "force restore may cause db data lost."
        elif [ $BACKUP_NODE_COUNT -lt $[ $NODE_COUNT / 2 + 1 ] ]; then
            echo -e -n "\nNodes count of cluster taken backup should not be less than quorum nodes count of cluster to be restored, "
            check_if_force_restore "force restore may cause db data lost."
        elif [ $NODE_COUNT != $BACKUP_NODE_COUNT ]; then
            if [[ ${IS_CONNECTED_VDC} == true ]]; then
                echo -e "\nCluster nodes count can't change when backup was taken in geo system, exiting.."
                exit 2
            else
                echo -n "WARNING: Cluster nodes count changed.."
            fi
        fi
    fi
}

check_if_force_restore() {
    local message=$1

    if [ ${FORCE} == true ]; then
        echo ${message}
        user_confirm "Are you sure you want to continue?"
    else
        echo "exiting.."
        exit 2
    fi
}

copy_to_other_nodes() {
    chmod -R 777 "$RESTORE_DIR"
    local command="scp svcuser@$LOCAL_NODE:$RESTORE_DIR/* $RESTORE_DIR"
    loop_execute "${command}" "false"
}

confirm_vdc_status() {
    if [[ ${IS_CONNECTED_VDC} == true ]]; then
        local message="This vdc is in geo federation, does the federation still have alive vdcs?"
        while true; do
            read -p "$message(yes/no)" yn
            case $yn in
                [Yy]es ) RESTORE_GEO_FROM_SCRATCH="false"; disconnect_vdc; break;;
                [Nn]o )  RESTORE_GEO_FROM_SCRATCH="true"; break;;
                * ) echo "Invalid input.";;
            esac
        done
    fi
}

disconnect_vdc() {
    echo "To avoid affecting other vdcs, please disconnect it from other vdcs."
    user_confirm "Are you sure it has been disconnected from others?"
}

user_confirm() {
    local message=${1}
    while true; do
        read -p "$message(yes/no)" yn
        case $yn in
            [Yy]es ) break;;
            [Nn]o )  echo "Exiting.."; exit;;
            * ) echo "Invalid input.";;
        esac
    done
}

check_standby() {
    # Restore is only allowed on the active site
    local is_standby=$(/etc/systool --getvdcprops | awk '/^site_is_standby=/ {print substr($0, length("site_is_standby=") + 1)}')
    if [ "$is_standby" == "true" ]; then
        echo "Restore on standby site is not supported."
        exit 2
    fi

    # Restore is not allowed if there are standby sites
    site_ids=$(/etc/systool --getprops | grep "\<site_ids\>=")
    site_ids=${site_ids#*=}
    ids=(${site_ids//,/ })
    number_of_sites=${#ids[@]}
    if [[ ${number_of_sites} -gt 1 ]] 
    then
        echo "Please remove the standby sites before restore"
        exit 1
    fi
}

# Paramters validation
FORCE=false
if [ $# -eq 1 ]; then
    if [ "$1" == "--help" -o "$1" == "-h" -o "$1" == "-help" ]; then
        usage
        exit 0
    fi
elif [ $# -eq 2 ] && [ "$2" == "-f" ]; then
    FORCE=true
else
    usage
    exit 2
fi

RESTORE_DIR="/data/restore-`date +%s`"
NODE_COUNT=`/etc/systool --getprops | awk -F '=' '/\<node_count\>/ {print $2}'`
LOCAL_NODE=`/etc/systool --getprops | awk -F '=' '/\<node_id\>/ {print $2}'`

RESTORE_ORIGIN=$(readlink -f "$1")
if [ -d "$RESTORE_ORIGIN" ] ; then
    RESTORE_DIR=${RESTORE_ORIGIN}
fi

trap clean_up EXIT

check_standby

validate_parameters

input_password

upload_backup

confirm_vdc_status

trap - EXIT #remove the handler since the restore-internal.sh will reset it

${DIR}/restore-internal.sh "${RESTORE_DIR}" "${ROOT_PASSWORD}" "${RESTORE_GEO_FROM_SCRATCH}"
