CREATE_TENANT="Create sub tenant(name=%s) within parent tenant(id=%s) succeed. The new tenant Id is %s."
UPDATE_TENANT="Update tenant(id=%s) with new setttings (name=%s, attributes etc.) succeed."
DELETE_TENANT="Delete tenant(id=%s, name=%s) succeed."
REASSIGN_TENANT_ROLES="Reassign tenant(id=%s, name=%s) with fully new roles succeed."
MODIFY_TENANT_ROLES="Adjust tenant(id=%s, name=%s) roles assignment succeed. Role assignment changes: %s"
UPDATE_TENANT_STS=Set tenant(id=%s, name=%s) STS certificate succeed."
SET_TENANT_NAMESPACE="Succeed to attach tenant(id=%s, name=%s) with namespace %s."
GET_TENANT_NAMESPACE="Succeed to get tenant(id=%s, name=%s) namespace(%s)."
UNSET_TENANT_NAMESPACE="Succeed to detach tenant(id=%s, name=%s) from namespace %s."

CREATE_PROJECT="Create project(name=%s) within tenant(id=%s) succeed. The new project id is %s."
UPDATE_PROJECT="Update project(id=%s) with new name(%s) and owner(%s) succeed."
DELETE_PROJECT="Delete project(id=%s) succeed."
REASSIGN_PROJECT_ACL="Reassign project(id=%s) with fully new acls succeed."
MODIFY_PROJECT_ACL="Adjust project(id=%s, name= %s) acls assignment succeed. Project ACL assignment changes: %s"
CREATE_VPOOL="vpool(id=%s, name=%s, type=%s, protocols=%s, varrays=%s, provisionType=%s, autoTierpolicy=%s, driveType=%s, highAvailable=%s) created."
UPDATE_VPOOL="vpool(id=%s, name=%s, type=%s) updated with the latest settings (protocols=%s, varrays=%s, provisionType=%s, autoTierpolicy=%s, driveType=%s)."
DELETE_VPOOL="vpool(id=%s, name=%s, type=%s) deleted."
REASSIGN_VPOOL_ACL="Reassign vpool(id=%s, name=%s, type=%s) with fully new acls succeed."
MODIFY_VPOOL_ACL="Adjust vpool(id=%s, name=%s, type=%s) acls succeed."

CREATE_BLOCK_VOLUME_BEGIN="Adding async task to create volume (name=%s, count=%s) within virtual array(id=%s) and assign it to project(id=%s)..."
CREATE_BLOCK_VOLUME_END="Volume(id=%s) created."
CREATE_BLOCK_VOLUME_END_FAILURE="Failed to create volume(id=%s)."
EXPAND_BLOCK_VOLUME_BEGIN="Adding async task to expand volume(id=%s) capacity(currentSize=%s, newSize=%s)..."
EXPAND_BLOCK_VOLUME_END="Expand volume(id=%s) capacity to newSize(%s) succeed."
EXPAND_BLOCK_VOLUME_END_FAILURE="Failed to expand volume(id=%s) capacity to newSize(%s)."
DELETE_BLOCK_VOLUME_BEGIN="Adding aysnc task to delete volume(name=%s, id=%s)..."
DELETE_BLOCK_VOLUME_MULTI_BEGIN="Adding async task to delete multiple volumes..."
DELETE_BLOCK_VOLUME_END="Volume(id=%s) deleted."
DELETE_BLOCK_VOLUME_END_FAILURE="Failed to delete volume(id=%s)."

CREATE_SRDF_LINK_END="SRDF Link created for source (id=%s) and target (id=%s)."
CREATE_SRDF_LINK_END_FAILURE="Failed to create SRDF Link for source (id=%s) and target (id=%s)."
DETACH_SRDF_LINK_END="SRDF Link detached for source (id=%s) and target (id=%s)."
DETACH_SRDF_LINK_END_FAILURE="Failed to detach SRDF Link for source (id=%s) and target (id=%s)."
PAUSE_SRDF_LINK_END="SRDF Link paused for source (id=%s) and target (id=%s)."
PAUSE_SRDF_LINK_END_FAILURE="Failed to pause SRDF Link for source (id=%s) and target (id=%s)."
RESUME_SRDF_LINK_END="SRDF Link resumed for source (id=%s) and target (id=%s)."
RESUME_SRDF_LINK_END_FAILURE="Failed to resume SRDF Link for source (id=%s) and target (id=%s)."
FAILOVER_SRDF_LINK_END="SRDF Link failed over for source (id=%s) and target (id=%s)."
FAILOVER_SRDF_LINK_END_FAILURE="Failed to fail over SRDF Link for source (id=%s) and target (id=%s)."
SWAP_SRDF_VOLUME_END="SRDF Volume swapped for source (id=%s) and target (id=%s)."
SWAP_SRDF_VOLUME_END_FAILURE="Failed to swap SRDF Volume for source (id=%s) and target (id=%s)."

CREATE_VOLUME_SNAPSHOT_BEGIN="Adding async task to create snapshot(name=%s) for volume(id=%s)..."
CREATE_VOLUME_SNAPSHOT_END="Snapshot(id=%s, name=%s) created for volume(id=%s)."
CREATE_VOLUME_SNAPSHOT_END_FAILURE="Failed to create snapshot(name=%s) for volume(id=%s)."
RESTORE_VOLUME_SNAPSHOT_BEGIN="Adding async task to restore snapshot(id=%s) to volume(id=%s) in device(id=%s)..."
RESTORE_VOLUME_SNAPSHOT_END="Snapshot(id=%s) restored to volume(id=%s)."
RESTORE_VOLUME_SNAPSHOT_END_FAILURE="Failed to restore snapshot(id=%s) to volume(id=%s)."
ACTIVATE_VOLUME_SNAPSHOT_BEGIN="Adding async task to activate snapshot(id=%s, name=%s)..."
ACTIVATE_VOLUME_SNAPSHOT_END="Snapshot(id=%s, name=%s) activated for volume(id=%s)."
ACTIVATE_VOLUME_SNAPSHOT_END_FAILURE="Failed to activate snapshot(id=%s, name=%s) for volume(id=%s)."
DEACTIVATE_VOLUME_SNAPSHOT_BEGIN="Adding async task to deactive snapshot(id=%s, label=%s, sourceVolume=%s) in device(id=%s)..."
DEACTIVATE_VOLUME_SNAPSHOT_END="Snapshot(id=%s, label=%s) deactivated for volume %s."
DEACTIVATE_VOLUME_SNAPSHOT_END_FAILURE="Failed to deactive snapshot(id=%s, label=%s) for volume %s."
DELETE_VOLUME_SNAPSHOT_BEGIN="Adding async task to delete snapshot(id=%s, label=%s, sourceVolume=%s) in device(id=%s)..."
DELETE_VOLUME_SNAPSHOT_END="Snapshot(id=%s, label=%s) deleted on volume %s."
DELETE_VOLUME_SNAPSHOT_END_FAILURE="Failed to delete snapshot(id=%s, label=%s) on volume %s."

CREATE_VOLUME_MIRROR_BEGIN="Adding async task to create mirror(name=%s) for volume(id=%s)..."
CREATE_VOLUME_MIRROR_END="Mirror(id=%s, name=%s) created for volume (id=%s)."
CREATE_VOLUME_MIRROR_END_FAILURE="Failed to create mirror(name=%s) for volume(id=%s)."
DEACTIVATE_VOLUME_MIRROR_BEGIN="Adding async task to deactivate mirror(id=%s, name=%s)..."
DEACTIVATE_VOLUME_MIRROR_END="Mirror(id=%s, name=%s) deactivated for volume(id=%s)."
DEACTIVATE_VOLUME_MIRROR_END_FAILURE="Failed to deactivate mirror(id=%s, name=%s) for volume(id=%s)."
DELETE_VOLUME_MIRROR_BEGIN="Adding async task to delete mirror(id=%s, name=%s) for volume(id=%s)..."
DELETE_VOLUME_MIRROR_END="Mirror(id=%s, name=%s) deleted for volume(id=%s)."
DELETE_VOLUME_MIRROR_END_FAILURE="Failed to delete mirror(id=%s, name=%s) for volume(id=%s)."
DETACH_VOLUME_MIRROR_BEGIN="Adding async task to detach mirror(id=%s, name=%s) for volume(id=%s)..."
DETACH_VOLUME_MIRROR_END="Mirror(id=%s, name=%s) detached for volume(id=%s)."
DETACH_VOLUME_MIRROR_END_FAILURE="Failed to detach mirror(id=%s, name=%s) for volume(id=%s)."
FRACTURE_VOLUME_MIRROR_BEGIN="Adding async task to fracture mirror(id=%s, name=%s, sync param=%s) procedure ..."
FRACTURE_VOLUME_MIRROR_END="Mirror(id=%s, name=%s) fractured for volume(id=%s)."
FRACTURE_VOLUME_MIRROR_END_FAILURE="Failed to fracture mirror(id=%s, name=%s) for volume(id=%s)."

CREATE_EXPORT_GROUP_BEGIN="Adding async task to create export group(name=%s) in virtual array(id=%s) for project(id=%s)..."
CREATE_EXPORT_GROUP_END="Export group(name=%s, id=%s) created in virtual array(id=%s) for project(id=%s)."
CREATE_EXPORT_GROUP_END_FAILURE="Failed to create export group(name=%s, id=%s) in virtual array(id=%s) for project(id=%s)."
DELETE_EXPORT_GROUP_BEGIN="Adding async task to delete export group(name=%s, id=%s) within virtual array(id=%s) of project(id=%s)..."
DELETE_EXPORT_GROUP_END="Export group(name=%s, id=%s) deleted within virtual array(id=%s) of project(id=%s)."
DELETE_EXPORT_GROUP_END_FAILURE="Failed to delete export group(name=%s, id=%s) within virtual array(id=%s) of project(id=%s)."
UPDATE_EXPORT_GROUP_BEGIN="Adding async task to update export group(name=%s, id=%s) within virtual array(id=%s) of project(id=%s)..."
UPDATE_EXPORT_GROUP_END="Export group(name=%s, id=%s) updated within virtual array(id=%s) of project(id=%s)."
UPDATE_EXPORT_GROUP_END_FAILURE="Failed to update export group(name=%s, id=%s) within virtual array(id=%s) of project(id=%s)."
ADD_EXPORT_VOLUME_BEGIN="Adding async task to add volume (id=%s) to block export group(name=%s, id=%s)..."
ADD_EXPORT_VOLUME_END="Volume (id=%s) added to block export group(name=%s, id=%s)."
ADD_EXPORT_VOLUME_END_FAILURE="Failed to add volume (id=%s) to block export group(name=%s, id=%s)."
DELETE_EXPORT_VOLUME_BEGIN="Adding async task to remove volume(id=%s) from block export group(name=%s, id=%s)..."
DELETE_EXPORT_VOLUME_END="Volume(id=%s) removed from block export group(name=%s, id=%s)."
DELETE_EXPORT_VOLUME_END_FAILURE="Failed to remove volume(id=%s) from block export group(name=%s, id=%s)."
ADD_EXPORT_INITIATOR_BEGIN="Adding async task to add initiator(protocol=%s, node=%s, port=%s, hostname=%s) to block export group(name=%s, id=%s)..."
ADD_EXPORT_INITIATOR_END="Initiator(protocol=%s, node=%s, port=%s, hostname=%s) added to block export group(name=%s, id=%s)."
ADD_EXPORT_INITIATOR_END_FAILURE="Failed to add initiator(protocol=%s, node=%s, port=%s, hostname=%s) to block export group(name=%s, id=%s)."
DELETE_EXPORT_INITIATOR_BEGIN="Adding async task to remove initiator(protocol=%s, node=%s, port=%s, hostname=%s) from block export group(name=%s, id=%s)..."
DELETE_EXPORT_INITIATOR_END="Initiator(protocol=%s, node=%s, port=%s, hostname=%s) removed from block export group(name=%s, id=%s)."
DELETE_EXPORT_INITIATOR_END_FAILURE="Failed to remove initiator(protocol=%s, node=%s, port=%s, hostname=%s) from block export group(name=%s, id=%s)."

CREATE_FILE_SYSTEM_BEGIN="Adding async task to create file system(name=%s, size=%s) within virtual array(id=%s) and assign it to project(id=%s)..."
CREATE_FILE_SYSTEM_END="File system(name=%s) created within virtual array(id=%s) and assigned to project(id=%s)."
CREATE_FILE_SYSTEM_END_FAILURE="Failed to create file system(name=%s) within virtual array(id=%s) and assign it to project(id=%s)."
EXPORT_FILE_SYSTEM_BEGIN="Adding async task to export file system(id=%s) on device(id=%s) to clients(%s) with (security type=%s, permission=%s, usermapping=%s, protocol=%s)..."
EXPORT_FILE_SYSTEM_END="File system(id=%s) exported on device(id=%s) to clients(%s)."
EXPORT_FILE_SYSTEM_END_FAILURE="Failed to export file system(id=%s) on device(id=%s) to clients(%s)."
UNEXPORT_FILE_SYSTEM_BEGIN="Adding async task to unexport file system(id=%s) with (security type=%s, permission=%s, usermapping=%s, protocol=%s)..."
UNEXPORT_FILE_SYSTEM_END="File system(id=%s) unexported from device (id=%s)."
UNEXPORT_FILE_SYSTEM_END_FAILURE="Failed to unexport file system(id=%s, name=%s) with(%s)."
EXPAND_FILE_SYSTEM_BEGIN="Adding async task to expand file system(id=%s) size from (%s) to (%s)..."
EXPAND_FILE_SYSTEM_END="Expand file system(id=%s) size to (%s) succeed."
EXPAND_FILE_SYSTEM_END_FAILURE="Failed to expand file system(id=%s) size to (%s)."
DELETE_FILE_SYSTEM_BEGIN="Adding async task to delete file system(id=%s) on device(id=%s)..."
DELETE_FILE_SYSTEM_END="File system(id=%s) deleted from device(id=%s)."
DELETE_FILE_SYSTEM_END_FAILURE="Failed to delete file system(id=%s) on device(id=%s)."
RELEASE_FILE_SYSTEM="File system (id=%s) released from project (id=%s) for use by object"
UNDO_RELEASE_FILE_SYSTEM="File system (id=%s) release to object undone and re-assigned to project (id=%s)"
INGEST_FILE_SYSTEM_BEGIN="File systems ingested (id=%s)."
INGEST_FILE_SYSTEM_END="File systems ingested (id=%s)."
INGEST_FILE_SYSTEM_END_FAILURE="File systems ingestion failed (id=%s)."



CREATE_FILE_SYSTEM_SHARE_BEGIN="Adding async task to create SMB file share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) for file system(id=%s)..."
CREATE_FILE_SYSTEM_SHARE_END="SMB file share(name=%s, permission type=%s, permission=%s, max user=%s, description=%s) created for file system(id=%s)."
CREATE_FILE_SYSTEM_SHARE_END_FAILURE="Failed to create a SMB file share(name=%s, permission type=%s, permission=%s, max user=%s, description=%s) for file system(id=%s)."
DELETE_FILE_SYSTEM_SHARE_BEGIN="Adding async task to delete SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file system(id=%s)..."
DELETE_FILE_SYSTEM_SHARE_END="SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file system(id=%s) deleted."
DELETE_FILE_SYSTEM_SHARE_END_FAILURE="Failed to delete SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file system(id=%s)."

UPDATE_FILE_SYSTEM_NFS_ACL="Update File System (name=%s) NFS ACL"
UPDATE_FILE_SNAPSHOT_NFS_ACL="Update File System Snapshot (name=%s) NFS ACL"
DELETE_FILE_SYSTEM_NFS_ACL="Delete File System (name=%s) NFS ACL"
UPDATE_FILE_SYSTEM_SHARE_ACL="Update filesystem (name=%s) share ACL (name=%s)"
UPDATE_FILE_SNAPSHOT_SHARE_ACL="Update snapshot (name=%s) share ACL (name=%s)"
DELETE_FILE_SYSTEM_SHARE_ACL="Delete filesystem (name=%s) share ACL (name=%s)"
DELETE_FILE_SNAPSHOT_SHARE_ACL="Delete snapshot (name=%s) share ACL (name=%s)"

UPDATE_FILE_SYSTEM_NFS_ACL_END="Update File System (name=%s) NFS ACL"
UPDATE_FILE_SNAPSHOT_NFS_ACL_END="Update File System Snapshot (name=%s) NFS ACL"
DELETE_FILE_SYSTEM_NFS_ACL_END="Delete File System (name=%s) NFS ACL"
UPDATE_FILE_SYSTEM_SHARE_ACL_END="Update filesystem (name=%s) share ACL (name=%s)"
UPDATE_FILE_SNAPSHOT_SHARE_ACL_END="Update snapshot (name=%s) share ACL (name=%s)"
DELETE_FILE_SYSTEM_SHARE_ACL_END="Delete filesystem (name=%s) share ACL (name=%s)"
DELETE_FILE_SNAPSHOT_SHARE_ACL_END="Delete snapshot (name=%s) share ACL (name=%s)"


CREATE_FILE_SYSTEM_SNAPSHOT_BEGIN="Adding async task to create a snapshot(name=%s, id=%s) for file system(id=%s)..."
CREATE_FILE_SYSTEM_SNAPSHOT_END="Snapshot(name=%s, id=%s) created for file system(id=%s)."
CREATE_FILE_SYSTEM_SNAPSHOT_END_FAILURE="Failed to create a snapshot(name=%s, id=%s) for file system(id=%s)."
EXPORT_FILE_SNAPSHOT_BEGIN="Adding async task to export file snapshot(id=%s) on device(%s) to clients(%s) with (security type=%s, permission=%s, usermapping=%s, protocol=%s)..."
EXPORT_FILE_SNAPSHOT_END="File snapshot(id=%s) on device(id=%s) exported to clients(%s)."
EXPORT_FILE_SNAPSHOT_END_FAILURE="Failed to export file snapshot(id=%s) on device(id=%s) to clients(%s)."
UNEXPORT_FILE_SNAPSHOT_BEGIN="Adding async task to unexport file snapshot(id=%s) on device(id=%s) with (security type=%s, permission=%s, usermapping=%s, protocol=%s)..."
UNEXPORT_FILE_SNAPSHOT_END="File snapshot(id=%s, name=%s) with (%s) unexported."
UNEXPORT_FILE_SNAPSHOT_END_FAILURE="Failed to unexport file snapshot(id=%s, name=%s) with (%s)."
RESTORE_FILE_SNAPSHOT_BEGIN="Adding async task to restore file snapshot(id=%s) to file system(id=%s)..."
RESTORE_FILE_SNAPSHOT_END="File snapshot(id=%s) restore to file system(id=%s)."
RESTORE_FILE_SNAPSHOT_END_FAILURE="Failed to restore file snapshot(id=%s) to file system(id=%s)."
DELETE_FILE_SNAPSHOT_BEGIN="Adding async task to delete file snapshot(id=%s) on device(id=%s)..."
DELETE_FILE_SNAPSHOT_END="File snapshot(id=%s) on device(id=%s) deleted."
DELETE_FILE_SNAPSHOT_END_FAILURE="Failed to delete file snapshot(id=%s) on device(id=%s)."
ASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE="Snapshot Schedule policy (name=%s) has been assigned to File System %s"
UNASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE="Snapshot Schedule policy (name=%s) has been unassigned from File System %s"
GET_FILE_SYSTEM_SNAPSHOT_BY_SCHEDULE="Get Snapshot Schdule for file system (name=%s) " 
ASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE_END="Snapshot Schedule policy (name=%s) has been assigned to File System %s"
UNASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE_END="Snapshot Schedule policy (name=%s) has been unassigned from File System %s"
GET_FILE_SYSTEM_SNAPSHOT_BY_SCHEDULE_END="Get Snapshot Schdule for file system (name=%s) " 


CREATE_FILE_SNAPSHOT_SHARE_BEGIN="Adding async task to create SMB fileshare(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) for file snap(id=%s)..."
CREATE_FILE_SNAPSHOT_SHARE_END="SMB file share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) for file snap(id=%s) created."
CREATE_FILE_SNAPSHOT_SHARE_END_FAILURE="Failed to create a SMB file share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) for file snap(id=%s)."
DELETE_FILE_SNAPSHOT_SHARE_BEGIN="Adding async task to delete SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file snap(id=%s)..."
DELETE_FILE_SNAPSHOT_SHARE_END="SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file snap(id=%s) deleted."
DELETE_FILE_SNAPSHOT_SHARE_END_FAILURE="Failed to SMB share(Name=%s, permission type=%s, permission=%s, max user=%s, description=%s) of file snap(id=%s)."

PERFORM_PROTECTION_ACTION_BEGIN="Adding async task to operate protection(op=%s, type=%s) for volume(id=%s) with device(id=%s)."
PERFORM_PROTECTION_ACTION_END="Protection operation(op=%s) for volume(id=%s) with device(id=%s) succeed."
PERFORM_PROTECTION_ACTION_END_FAILURE="Failed to operate protection(op=%s) for volume(id=%s) with device(id=%s)."

CREATE_KEYPOOL="Create a keypool(name=%s) with vpool(id=%s) in project(id=%s) succeed. The keypoolId is %s."
DELETE_KEYPOOL="Delete a keypool(id=%s) from project(id=%s) succeed."
UPDATE_KEYPOOL_ACCESSMODE="Change the access mode for the keypool(id=%s) in project(id=%s) succeed."
CREATE_VARRAY="Create virtual array(name=%s, auto_san_zoning=%s) succeed. New virtual array id is %s."
UPDATE_VARRAY="Update virtual array(id=%s) with new settings (name=%s, auto_san_zoning=%s) succeed."
DELETE_VARRAY="Delete virtual array(id=%s, name=%s) succeed."
REASSIGN_VARRAY_ACL="Reassign virtual array(id=%s, name=%s) with fully new acls succeed."
MODIFY_VARRAY_ACL="Adjust virtual array(id=%s, name=%s) acls assignment succeed."
SET_VARRAY_PROTECTIONTYPE="Succeed to set virtual array(id=%s, name=%s) with protection type(%s) ."
GET_VARRAY_PROTECTIONTYPE="Succeed to get virtual array(id=%s, name=%s) protection type(%s)."
UNSET_VARRAY_PROTECTIONTYPE="Succeed to unset virtual array(id=%s, name=%s) protection type (original value:%s)."
SET_VARRAY_REGISTERED="Succeed to set virtual array(id=%s, name=%s) registered status(%s)."
GET_VARRAY_REGISTERED="Succeed to get virtual array(id=%s, name=%s) registered status(%s)."


CREATE_DATA_STORE="Create an dataStore(name=%s, size=%s) with vpool(id=%s) in varray(id=%s) for device(id=%s) succeed."
DELETE_DATA_STORE="Delete dataStore for hosting device(id=%s) succeed."
CREATE_SECRET_KEY="Create secrete key for user(name=%s) at time(%s) succeed."
DELETE_ALL_SECRET_KEYS="Delete all secrete keys of user(id=%s) succeed."
DELETE_SECRET_KEY="Delete secrete key(creationTime=%s) of user(id=%s) succeed."
REGISTER_SMISPROVIDER="Register SMIS provider(name=%s, id=%s, ip=%s, port=%s, user=%s) succeed."
UPDATE_SMISPROVIDER="Update SMIS provider(id=%s) info(name=%s, ip=%s, port=%s, user=%s) succeed."
DELETE_SMISPROVIDER="Delete SMIS provider(id=%s, name=%s, ip=%s, port=%s, user=%s) succeed."
DEREGISTER_STORAGE_POOL="Deregister the storage pool(id=%s) succeed."
UPDATE_STORAGE_POOL="Update info(vpool, varray etc.) for storage pool(id=%s) succeed."
DEREGISTER_STORAGE_PORT="Deregister storage port(name=%s, id=%s) succeed."
UPDATE_STORAGE_PORT="Update storage port(name=%s, id=%s) succeed."
REGISTER_STORAGE_SYSTEM="Register the storage system(id=%s) with provider(id=%s) succeed."
DEREGISTER_STORAGE_SYSTEM="Deregister the storage system(id=%s) with provider(id=%s) succeed."
CREATE_STORAGE_SYSTEM="Create storage system(serial=%s, type=%s, ip=%s, port=%s) succeed."
UPDATE_STORAGE_SYSTEM="Update storage system(id=%s, ip=%s, port=%s) succeed."
REGISTER_STORAGE_POOL="Register the storage pool(id=%s) on the storage system(id=%s) succeed."
REGISTER_STORAGE_PORT="Register the storage port(id=%s) on the storage system(id=%s) succeed."
REGISTER_STORAGEPROVIDER="Register the storage provider(label=%s id=%s IPAddress=%s port=%s username=%s interfacetype=%s) succeed"
CREATE_NETWORK="Create network(name=%s, type=%s) in virtual array(id=%s) succeed. The new network id is %s."
DELETE_NETWORK="Delete network(name=%s, type=%s, virtual array=%s, id=%s) succeed."
UPDATE_NETWORK_ENDPOINT="Update(op=%s) endpoints of network(name=%s, id=%s) succeed."
UPDATE_NETWORK="Update network(name=%s, type=%s, virtual array=%s, id=%s) with new settings succeed."
REGISTER_NETWORK="Register network succeed. The new network id is %s."
DEREGISTER_NETWORK="Deregister network(name=%s) succeed. The new network id is %s."
REASSIGN_ZONE_ROLES="Reassign virtual data center(root tenant id=%s, root tenant name=%s) with roles assignment succeed."
MODIFY_ZONE_ROLES="Adjust virtual data center(root tenant id=%s, root tenant name=%s) with roles assignment succeed. Role assignment changes: %s"
CREATE_INITIATOR="Create initiator(hostname=%s, node=%s, port=%s, protocol=%s, cluster=%s) succeed. The new initiator id is %s."
DELETE_INITIATOR="Delete initiator(id=%s, hostname=%s, node=%s, port=%s, protocol=%s, cluster=%s) succeed."
CREATE_NETWORK_SYSTEM="Create network system(id=%s, name=%s, portNumber=%s, userName=%s, smisProvider(ip=%s,portNumber=%s,userName=%s,useSsl=%s)) succeed."
UPDATE_NETWORK_SYSTEM="Update network system(id=%s, name=%s, portNumber=%s, userName=%s, smisProvider(ip=%s,portNumber=%s,userName=%s,useSsl=%s)) succeed."
REGISTER_NETWORK_SYSTEM="Register network system(id=%s, name=%s, portNumber=%s, userName=%s, smisProvider(ip=%s,portNumber=%s,userName=%s,useSsl=%s)) succeed."
DEREGISTER_NETWORK_SYSTEM="Deregister network system(id=%s, name=%s, portNumber=%s, userName=%s, smisProvider(ip=%s,portNumber=%s,userName=%s,useSsl=%s)) succeed."
DELETE_NETWORK_SYSTEM_BEGIN="Trying to delete network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s)) succeed."
DELETE_NETWORK_SYSTEM_END="Network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s)) deleted."
DELETE_NETWORK_SYSTEM_END_FAILURE="Failed to delete network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))."
ADD_SAN_ZONE_BEGIN="Adding async task to add san zones to network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))..."
ADD_SAN_ZONE_END="San zone(name=%s) added to network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))."
ADD_SAN_ZONE_END_FAILURE="Failed to add san zone(name=%s) to network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))."
REMOVE_SAN_ZONE_BEGIN="Adding async task to remove san zones from network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))..."
REMOVE_SAN_ZONE_END="San zone(name=%s) removed from network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s)) succeed."
REMOVE_SAN_ZONE_END_FAILURE="Failed to remove san zone(name=%s) from network system(id=%s, name=%s, protNumber=%s, userName=%s, smisProvider(ip=%s,protNumber=%s,userName=%s,useSsl=%s))."

UPDATE_USER_PREFERENCES="Update user perference (user=%s, e-mail notification=%s, e-mail address=%s, id=%s) succeed."

CREATE_HOST="Create host(hostname=%s, data center=%s, cluster=%s, tenant=%s) succeed. The host id is %s."
UPDATE_HOST="Update host(hostname=%s, data center=%s, cluster=%s, tenant=%s) succeed. The host id is %s."
DELETE_HOST="Delete host(hostname=%s, data center=%s, cluster=%s, tenant=%s) succeed. The host id is %s."
CREATE_HOST_IPINTERFACE="Create host interface(IP address=%s, host=%s) succeed. The interface id is %s."
UPDATE_HOST_IPINTERFACE="Update host interface(IP address=%s, host=%s) succeed. The interface id is %s."
DELETE_HOST_IPINTERFACE="Delete host interface(IP address=%s, host=%s) succeed. The interface id is %s."
CREATE_HOST_INITIATOR="Create host initator(port=%s, node=%s, host=%s) succeed. The initator id is %s."
UPDATE_HOST_INITIATOR="Update host initator(port=%s, node=%s, host=%s) succeed. The initator id is %s."
DELETE_HOST_INITIATOR="Delete host initator(port=%s, node=%s, host=%s) succeed. The initator id is %s."
CREATE_HOST_CLUSTER="Create host cluster(name=%s, data center=%s, tenant=%s) succeed. The cluster id is %s."
UPDATE_HOST_CLUSTER="Update host cluster(name=%s, data center=%s, tenant=%s) succeed. The cluster id is %s."
DELETE_HOST_CLUSTER="Delete host cluster(name=%s, data center=%s, tenant=%s) succeed. The cluster id is %s."
CREATE_VCENTER_DATA_CENTER="Create vcenter data center(name=%s, vcenter=%s, tenant=%s) succeed. The data center id is %s."
UPDATE_VCENTER_DATA_CENTER="Update vcenter data center(name=%s, vcenter=%s, tenant=%s) succeed. The data center id is %s."
DELETE_VCENTER_DATA_CENTER="Delete vcenter data center(name=%s, vcenter=%s, tenant=%s) succeed. The data center id is %s."
CREATE_VCENTER="Create vcenter(name=%s, ipaddress=%s port=%s osversion=%s, tenant=%s) succeed. The vcenter id is %s."
UPDATE_VCENTER="Update vcenter(name=%s, ipaddress=%s port=%s osversion=%s, tenant=%s) succeed. The vcenter id is %s."
DELETE_VCENTER="Delete vcenter(name=%s, ipaddress=%s port=%s osversion=%s, tenant=%s) succeed. The vcenter id is %s."

CREATE_AUTHPROVIDER="Create authentication provider with configuration (%s) succeed. The new auth provider id is %s."
UPDATE_AUTHPROVIDER="Update authentication provider(id=%s) with configuration (%s) succeed."
DELETE_AUTHPROVIDER="Delete authentication provider(id=%s) succeed."

CREATE_PROTECTION_SYSTEM="Protection system(name=%s, type=%s, ip=%s, port=%s, user=%s) created.  The new protection system id is %s."
UPDATE_PROTECTION_SYSTEM="Protection system(id=%s) updated with new settings(ip=%s, port=%s, user=%s)."
DELETE_PROTECTION_SYSTEM="Protection system(id=%s) deleted."

SEND_ALERT="Send alert(nodeId=%s,name=%s,time interval=%s-%s) to call home service succeed."
SEND_REGISTRATION="Send registration event to SYR succeed."
SEND_HEARTBEAT="Send a periodic heartbeat event to SYR succeed."
SEND_STAT="Send stats information to SYR succeed."
SEND_LICENSE_EXPIRATION="Send license expiration event to SYR succeed."
CREATE_ESRS_CONFIGURATION="Creates ESRS configuration file succeed."
SCHEDULE_EVENT="Request for automatic scheduler."
ADD_LICENSE="Add new license to system succeed."
UPDATE_SYSTEM_PROPERTY="Update system property (%s) succeed."
UPDATE_VERSION="Update target version to (%s) by (forceSet=%s) succeed."
INSTALL_IMAGE="Install image(version=%s) succeed."
REMOVE_IMAGE="Remove image(version=%s) by (forceSet=%s) succeed."
WAKEUP_UPGRAGE_MANAGER="Wake up upgrade manager succeed."
UPLOAD_IMAGE="Upload image(version=%s) to node(id=%s) succeed."
CHANGE_LOCAL_AUTHUSER_PASSWORD="Local authenticated user(%s) changes its password succeed."
RESET_LOCAL_USER_PASSWORD="Sysadmin(%s) resets password of local user(%s) succeed."
CHANGE_LOCAL_AUTHUSER_AUTHKEY="Change SSH authorizedkey2 of an authenticated local user(%s) succeed."
SSH_LOGIN="SSH authentication (login/execution) for %s from %s to %s succeed."
SSH_LOGIN_FAILURE="SSH authentication (login/execution) for %s from %s to %s fail."
AUTHENTICATION="Authenticate %s succeed."
AUTHENTICATION_FAILURE="Authenticate %s fail."

RESTART_SERVICE=Service %s on node %s was restarted.
REBOOT_NODE=ViPR node %s was rebooted.
CREATE_CLUSTER=ViPR cluster (name=%s, data center=%s, id=%s) has been created successfully.
UPDATE_CLUSTER=ViPR cluster (name=%s, data center=%s, id=%s) has been updated successfully.
DELETE_CLUSTER=ViPR cluster (name=%s, data center=%s, id=%s) has been deleted successfully.
POWER_OFF_CLUSTER=ViPR cluster received a poweroff command.

CREATE_CAS_POOL=Cas pool (name=%s, cluster=%s) has been created successfully.
UPDATE_CAS_POOL=Cas pool (name=%s, cluster=%s) has been updated successfully.
CREATE_CAS_PROFILE=Cas profile (name=%s, cluster=%s) has been created successfully.
UPDATE_CAS_PROFILE=Cas profile (name=%s, cluster=%s) has been updated successfully.
CREATE_CAS_CLUSTER=Cas cluster (name=%s) has been created successfully.
UPDATE_CAS_CLUSTER=Cas cluster (name=%s) has been updated successfully.

ADD_VDC=VDC %s added at VIP %s
REMOVE_VDC=VDC %s at VIP %s removed from ViPR
DISCONNECT_VDC=VDC %s at VIP %s temporarily disconnected from ViPR
RECONNECT_VDC=VDC %s at VIP %s reconnected to ViPR

SET_KEY_AND_CERTIFICATE=ViPR's key and certificate have been set. The new certificate is %s.
REGENERATE_KEY_AND_CERTIFICATE=ViPR's key and certificate have been regenerated. The new certificate is %s. 
UPDATE_TRUSTED_CERTIFICATES=ViPR's trusted certificates were updated. Trusted certificate changes: %s.
UPDATE_TRUSTED_CERTIFICATES_PARTIAL=ViPR's trusted certificates were updated. Trusted certificate changes: ADDED=%s, REMOVED=%s.
UPDATE_TRUSTSTORE_SETTINGS=ViPR's truststore settings were updated. Truststore settings changes: %s.
CLUSTER_NODE_REJOIN="Received and accepted a node rejoin request."

CREATE_BACKUP=Create Vipr backup (name=%s) successfully on %s of site %s.
CREATE_BACKUP_FAILURE=Create Vipr backup (name=%s) failure on %s of site %s,Reason=(%s)
UPLOAD_BACKUP=Upload Vipr backup (name=%s) successfully on %s of site %s.
UPLOAD_BACKUP_FAILURE=Upload Vipr backup (name=%s) failure on %s of site %s,Reason=(%s)
DELETE_BACKUP=Delete Vipr backup (name=%s) successfully on %s of site %s.
DELETE_BACKUP_FAILURE=Delete Vipr backup (name=%s) failure on %s of site %s,Reason=(%s)
PULL_BACKUP=Received and accepted a pull backup(name=%s) request
PULL_BACKUP_CANCEL=Received and accepted a cancel pull backup request
RESTORE_BACKUP_BEGIN=Restoring ViPR backup(name=%s)
RESTORE_BACKUP_END=Restored ViPR backup(name=%s) successfully
RESTORE_BACKUP_FAILURE=Failed to restore ViPR backup(name=%s)

ADD_STANDBY_BEGIN=Adding standby site: %s
ADD_STANDBY_FAILURE=Failed to initiate adding standby site: %s
ADD_STANDBY_END=Standby site: %s has been successfully added
ADD_STANDBY_END_FAILURE=Failed to add standby site: %s

REMOVE_STANDBY_BEGIN=Removing standby site: %s
REMOVE_STANDBY_FAILURE=Failed to initiate removing standby site: %s
REMOVE_STANDBY_END=Standby site (uuid=%s) has been successfully removed
REMOVE_STANDBY_END_FAILURE=Failed to remove standby site: %s

PAUSE_STANDBY_BEGIN=Pausing data synchronization between the active and standby site: %s
PAUSE_STANDBY_FAILURE=Failed to initiate pausing standby: %s
PAUSE_STANDBY_END=Data synchronization between the active and standby site: %s has been successfully paused
PAUSE_STANDBY_END_FAILURE=Failed to pause data synchronization between the active and standby site: %s

RESUME_STANDBY_BEGIN=Resuming data synchronization between the active and standby site: %s
RESUME_STANDBY_FAILURE=Failed to initiate resuming standby %s
RESUME_STANDBY_END=Data synchronization between the active and standby site: %s has been successfully resumed
RESUME_STANDBY_END_FAILURE=Failed to resume data synchronization between the active and standby site: %s

SWITCHOVER_BEGIN=Switching over from active site %s to standby site: %s
SWITCHOVER_FAILURE=Cannot switchover to standby site: %s
ACTIVE_SWITCHOVER_END=Old active site: %s has been switchover to standby
ACTIVE_SWITCHOVER_END_FAILURE=Failed to switch old active site: %s into standby
STANDBY_SWITCHOVER_END=Old standby site: %s has been switchover to active
STANDBY_SWITCHOVER_END_FAILURE=Failed to switch old standby site: %s into active

FAILOVER_BEGIN=Failing over from old active site %s to standby site %s
FAILOVER_FAILURE=Cannot failover to standby site %s
STANDBY_FAILOVER_END=Old standby site: %s has been failover to active
STANDBY_FAILOVER_END_FAILURE=Failed to failover to new active site: %s

UPDATE_SITE=Update site information for site %s(vip=%s, uuid=%s)
UPDATE_SITE_FAILURE=Failed to update site information for site %s(vip=%s, uuid=%s)

STANDBY_DEGRADE_END=Site %s has been marked as STANDBY_DEGRADED
STANDBY_DEGRADE_END_FAILURE=Fail to mark site %s STANDBY_DEGRADED
STANDBY_REJOIN_END=Site %s has rejoined into VDC successfully
STANDBY_REJOIN_END_FAILURE=Site %s failed to rejoin VDC

INSTALL_STORAGE_DRIVER_BEGIN=Installing driver %s
INSTALL_STORAGE_DRIVER_FAILURE=Failed to initiating installing driver %s
INSTALL_STORAGE_DRIVER_END=Driver %s has been successfully installed
INSTALL_STORAGE_DRIVER_END_FAILURE=Failed to install driver %s

UNINSTALL_STORAGE_DRIVER_BEGIN=Uninstalling driver %s
UNINSTALL_STORAGE_DRIVER_FAILURE=Failed to initiating uninstalling driver %s
UNINSTALL_STORAGE_DRIVER_END=Driver %s has been successfully uninstalled
UNINSTALL_STORAGE_DRIVER_END_FAILURE=Failed to uninstall driver %s

UPGRADE_STORAGE_DRIVER_BEGIN=Upgrading driver %s
UPGRADE_STORAGE_DRIVER_FAILURE=Failed to initiating upgrading driver %s
UPGRADE_STORAGE_DRIVER_END=Driver %s has been successfully upgraded
UPGRADE_STORAGE_DRIVER_END_FAILURE=Failed to upgrade driver %s

CREATE_FILE_MIRROR="File System's replication copy created (name=%s)"
DELETE_FILE_MIRROR="File System's replication copy deleted (name=%s)"
SUSPEND_FILE_MIRROR="File System's replication copy suspended (name=%s)"
DETACH_FILE_MIRROR="Detach File System's replication copy (name=%s)"
PAUSE_FILE_MIRROR="Pause File System's replication copy (name=%s)"
RESUME_FILE_MIRROR="Resume File System's replication copy (name=%s)"
FAILOVER_FILE_MIRROR="File System's replication copy failover (name=%s)":
STOP_FILE_MIRROR="Stop File System's replication copy (name=%s)"
START_FILE_MIRROR="Start File System's replication copy (name=%s)"
RESYNC_FILE_MIRROR="Resynch File System's replication copy (name=%s)"
DELETE_VOLUME_GROUP="Delete File System's replication copy (name=%s)"

CREATE_FILE_MIRROR_END="File System's replication copy created (name=%s)"
DELETE_FILE_MIRROR_END="File System's replication copy deleted (name=%s)"
SUSPEND_FILE_MIRROR_END="File System's replication copy suspended (name=%s)"
DETACH_FILE_MIRROR_END="Detach File System's replication copy (name=%s)"
PAUSE_FILE_MIRROR_END="Pause File System's replication copy (name=%s)"
RESUME_FILE_MIRROR_END="Resume File System's replication copy (name=%s)"
FAILOVER_FILE_MIRROR_END="File System's replication copy failover (name=%s)"
STOP_FILE_MIRROR_END="Stop File System's replication copy (name=%s)"
START_FILE_MIRROR_END="Start File System's replication copy (name=%s)"
RESYNC_FILE_MIRROR_END="Resynch File System's replication copy (name=%s)"
DELETE_VOLUME_GROUP_END="Delete File System's replication copy (name=%s)"


CHANGE_FILE_SYSTEM_VPOOL="Changing File System (name=%s) vPool"
CREATE_MIRROR_FILE_SYSTEM="Create File System's replication copy (name=%s)"
DELETE_MIRROR_FILE_SYSTEM="Delete File System's replication copy (name=%s)"
FAILBACK_FILE_MIRROR="Fileback File replication copy (name=%s)"
REFRESH_FILE_MIRROR="Refresh File replication copy (name=%s)"   
MODIFY_FILE_MIRROR_RPO="Modify File replication copy (name=%s)"
CREATE_SCHEDULE_POLICY="Create Schedule policy (name=%s)"


CHANGE_FILE_SYSTEM_VPOOL_END="Changing File System (name=%s) vPool"
CREATE_MIRROR_FILE_SYSTEM_END="Create File System's replication copy (name=%s)"
DELETE_MIRROR_FILE_SYSTEM_END="Delete File System's replication copy (name=%s)"
FAILBACK_FILE_MIRROR_END="Fileback File replication copy (name=%s)"
REFRESH_FILE_MIRROR_END="Refresh File replication copy (name=%s)"   
MODIFY_FILE_MIRROR_RPO_END="Modify File replication copy (name=%s)"
CREATE_SCHEDULE_POLICY_END="Create Schedule policy (name=%s)"

