#!/usr/bin/python
#
# Copyright (c) 2017 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import *

#----------------------------------------------------------------------
# computeimageserver cli functions
#----------------------------------------------------------------------
def computeimageserver_create(args):
    bourne.connect(args.ip)
    print args
    task = bourne.computeimageserver_create(args.name, args.imageserver_ip, args.imageserver_secondip, args.imageserver_user, 
               args.imageserver_password, args.tftpBootDir, args.osinstall_timeout, args.ssh_timeout, args.imageimport_timeout)
    print task    

def computeimageserver_delete(args):
    bourne.connect(args.ip)
    uri = bourne.computeimageserver_query(args.name)
    res = bourne.computeimageserver_delete(uri)
    print res

def computeimageserver_show(args):
    bourne.connect(args.ip)
    uri = bourne.computeimageserver_query(args.name)
    computeimageserver = bourne.computeimageserver_show(uri)
    print computeimageserver

def computeimageserver_query(args):
    bourne.connect(args.ip)
    print bourne.computeimageserver_query(args.name)

def computeimageserver_list(args):
    bourne.connect(args.ip)
    computeimageserver_display_hdr()
    res = bourne.computeimageserver_list()
    for r in res:
        computeimageserver = bourne.computeimageserver_show(r['id'])
        computeimageserver_display(computeimageserver)

#
# display computeimageserver in list form
#
computeimageserver_display_fmt = '{0:16s} {1:16s} {2:10s} {3:8s} {4:s}'

def computeimageserver_display_hdr():
    print computeimageserver_display_fmt.format('name', 'imageserver_ip', 'imageserver_secondip', 'status', 'id')

def computeimageserver_display(computeimageserver):
    print computeimageserver_display_fmt.format(computeimageserver['name'], computeimageserver['imageserver_ip'], computeimageserver['imageserver_secondip'],
               computeimageserver['imageserver_status'], computeimageserver['id'])

# tag
#def computeimageserver_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.computeimageserver_query(args.name)
    print 'Tagging compute image server', args.id
    bourne.tag(args.resource_type, args.id, args.tags)

# search
def computeimageserver_search(args):
    bourne.connect(args.ip)
    if (args.scope != None):
        # query tenant id from tenant name
        args.scope = bourne.tenant_query(args.scope)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching compute image server with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# computeimageserver <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne computeimageserver cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | delete | show | list )')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# computeimageserver create label
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('name',				help = 'label for the computeimageserver')
create.add_argument('imageserver_ip',		help = 'image server IP ')
create.add_argument('imageserver_secondip',	help = 'imageserver_secondip - OS Install IP Network Address')
create.add_argument('imageserver_user',		help = 'user name')
create.add_argument('imageserver_password',	help = 'password')
create.add_argument('--tftpBootDir',		help = 'boot directory', default='/opt/tftpbootdir')
create.add_argument('--osinstall_timeout',  help = 'os install timeout in seconds', default='3600')
create.add_argument('--ssh_timeout',		help = 'ssh timeout in seconds', default='20')
create.add_argument('--imageimport_timeout',help = 'image import timeout in seconds', default='1800')

# computeimageserver update uri
#update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
#update.add_argument('name', help = 'name of compute imageserver')
#update.add_argument('--imageserver_ip', help = 'compute image server IP')
#update.add_argument('--imageserver_secondip', help = 'imageserver_secondip - OS Install IP Network Address')

# computeimageserver delete uri
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'name of compute imageserver')

# computeimageserver show uri
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name',	help = 'name of compute imageserver')

# computeimageserver query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name',	help = 'name of compute imageserver')

# computeimageserver provider list 
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')

# tag 
resource_type="computeimageserver"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
tag.add_argument('--id',     metavar = 'id',     help = 'resource id', default=None)
tag.add_argument('name',     metavar = 'name',   help = 'resource name')
tag.add_argument('tags',     metavar = 'tags',   help = 'tags', nargs='+', default=None)

# search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
search.add_argument('--scope',   metavar = 'scope',  help = 'scope(global or tenant) for searching', default=None)
search.add_argument('prefix',    metavar = 'prefix', help = 'prefix for search name or tag')
search.add_argument('--tag',     metavar = 'tag',    help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project',help = 'search name within project', default=None)


#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:
    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if   (cmd == "create"):
        args = create.parse_args()
        computeimageserver_create(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        computeimageserver_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        computeimageserver_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        computeimageserver_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        computeimageserver_list(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        computeimageserver_tag(args)
    elif (cmd == "search"):
        args = search.parse_args()
        computeimageserver_search(args)
    else:
        parser.print_help()
except:
    raise
