#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import *

#----------------------------------------------------------------------
# computesystem cli functions
#----------------------------------------------------------------------
def computesystem_create(args):
    bourne.connect(args.ip)
    task = bourne.computesystem_create(args.name, args.computeip, args.computeport, args.user, 
               args.password, args.type, args.usessl, args.osinstallnetwork, args.compute_image_server)
    print task    

def computesystem_update(args):
    bourne.connect(args.ip)
    uri = bourne.computesystem_query(args.name)
    task = bourne.computesystem_update(uri, args.compute_image_server)
    print task

def computesystem_delete(args):
    bourne.connect(args.ip)
    uri = bourne.computesystem_query(args.name)
    res = bourne.computesystem_delete(uri)
    print res

def computesystem_show(args):
    bourne.connect(args.ip)
    uri = bourne.computesystem_query(args.name)
    computesystem = bourne.computesystem_show(uri)
    print computesystem

def computesystem_query(args):
    bourne.connect(args.ip)
    print bourne.computesystem_query(args.name)

def computesystem_list(args):
    bourne.connect(args.ip)
    computesystem_display_hdr()
    res = bourne.computesystem_list()
    for r in res:
        computesystem = bourne.computesystem_show(r['id'])
        computesystem_display(computesystem)

def computesystem_getSPTid(args):
    bourne.connect(args.ip)
    return bourne.computesystem_getSPTid(args.name, args.sptname)

def computesystem_get_computeelement_id(args):
    bourne.connect(args.ip)
    print args
    print args.cename
    celist = args.cename.split(",")
    ceIdList = []
    for ce in celist:
        ceIdList.append(bourne.computesystem_get_computeelement_id(args.name, ce))
    return ceIdList

def computesystem_discover(args):
    bourne.connect(args.ip)
    s = bourne.computesystem_discover(args.name)
    print s

#
# display computesystem in list form
#
computesystem_display_fmt = '{0:16s} {1:16s} {2:10s} {3:8s} {4:s}'

def computesystem_display_hdr():
    print computesystem_display_fmt.format('name', 'ip_address', 'type', 'os_install_network', 'id')

def computesystem_display(computesystem):
    print computesystem_display_fmt.format(computesystem['name'], computesystem['ip_address'], computesystem['type'],
               computesystem['os_install_network'], computesystem['id'])

# tag
#def computesystem_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.computesystem_query(args.name)
    print 'Tagging compute system', args.id
    bourne.tag(args.resource_type, args.id, args.tags)

# search
def computesystem_search(args):
    bourne.connect(args.ip)
    if (args.scope != None):
        # query tenant id from tenant name
        args.scope = bourne.tenant_query(args.scope)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching compute system with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# computesystem <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne computesystem cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | update | delete | show | list | getSPTid | get_computeelement_id | discover)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# computesystem create label
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('name',			help = 'label for the computesystem')
create.add_argument('computeip',		help = 'compute system IP ')
create.add_argument('computeport',		help = 'port')
create.add_argument('user',			help = 'user name')
create.add_argument('password',			help = 'password')
create.add_argument('type',			help = 'type - ucs')
create.add_argument('usessl',         	help = 'use ssl')
create.add_argument('osinstallnetwork',	help = 'os install network')
create.add_argument('--compute_image_server', help = 'image server name')

# computesystem update uri
update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
update.add_argument('name', help = 'name of compute system')
update.add_argument('compute_image_server', help = 'compute image server')

# computesystem delete uri
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'name of compute system')

# computesystem show uri
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name',	help = 'name of compute system')

# computesystem query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name',	help = 'name of compute system ')

# computesystem provider list 
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')

# getSPTid
getSPTid= argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
getSPTid.add_argument('name',   help = 'compute system name')
getSPTid.add_argument('sptname',   help = 'service profile template name')

# get_computeelement_id
get_computeelement_id= argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
get_computeelement_id.add_argument('name',   help = 'compute system name')
get_computeelement_id.add_argument('cename',   help = 'compute element name')

# compute system discover
discover = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
discover.add_argument('name', help='name of compute system being discovered')

# tag 
resource_type="computesystem"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
tag.add_argument('--id',     metavar = 'id',     help = 'resource id', default=None)
tag.add_argument('name',     metavar = 'name',   help = 'resource name')
tag.add_argument('tags',     metavar = 'tags',   help = 'tags', nargs='+', default=None)

# search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
search.add_argument('--scope',   metavar = 'scope',  help = 'scope(global or tenant) for searching', default=None)
search.add_argument('prefix',    metavar = 'prefix', help = 'prefix for search name or tag')
search.add_argument('--tag',     metavar = 'tag',    help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project',help = 'search name within project', default=None)


#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:
    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if   (cmd == "create"):
        args = create.parse_args()
        computesystem_create(args)
    elif (cmd == "update"):
        args = update.parse_args()
        computesystem_update(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        computesystem_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        computesystem_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        computesystem_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        computesystem_list(args)
    elif (cmd == "getSPTid"):
        args = getSPTid.parse_args()
        computesystem_getSPTid(args)
    elif (cmd == "get_computeelement_id"):
        args = get_computeelement_id.parse_args()
        computesystem_get_computeelement_id(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        computesystem_tag(args)
    elif (cmd == "search"):
        args = search.parse_args()
        computesystem_search(args)
    elif (cmd == "discover"):
        args = discover.parse_args()
        computesystem_discover(args)
    else:
        parser.print_help()
except:
    raise
