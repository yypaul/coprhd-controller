#!/bin/sh
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

# Use: dumpex export_group_name
# This command will dump from Cassandra the Export Group, each Export Mask contained in
# the Export Group, and each Initiator contained in each Export Mask.
# It is useful for determining what masks were created and what initiators they contain.

awk -f - <<'MYEND' $*

# Parse the entries from a file fn and put in indicated array table.
# The keys are a concatenation of URI and property name,
# the contents are the value of the property.
function parseEntries(fn, table) {
    uri = 0;
    while (getline <fn > 0) {
        if (match($1, "id:")) {
            uri = $2;
	    #print "id: ", uri;
	    table[uri,"id"] = uri;
        } else if ($0 ~ "^$") {
	    uri=0;
	} else if (uri != 0) {
	    key=$1;
	    content = $0;
	    sub(".* = ", "", content)
	    table[uri, key] = content;
        }
    }
}

# Print all the properties of one object given by it's URI
# that is located in the indicated associative table.
function printobj(table, uri) {
    print "*************************************************************";
    print uri;
    for (id in table) {
        key=id;
        sub("(vdc.|global)$", "", key);
        if (key ~ uri) {
	    key=id;
	    sub("urn:.*\\:(vdc.|global)","",key);
	    sub("[^a-zA-Z0-9_]*", "", key);
            # Exclude the mongo large OpStatusMap and creationTime entries
            if (! ((key ~ "status" && table[id] ~ "OpStatusMap.*") || key ~ "creationTime")) {
	        print "    ", key, " = ", table[id];
            }
	}
    }
    print " ";
}

#
# Extract the properties of a give object given its
# URI and associative table and make a simplier
# properties / value map that is put in obj.
function getobj(table, uri, obj) {
    for (id in table) {
        key=id;
        sub("(vdc.|global)$", "", key);
        if (key ~ uri) {
	    key=id;
	    sub("urn:.*\\:(vdc.|global)","",key);
	    sub("[^a-zA-Z0-9_]*", "", key);
	    obj[key] = table[id];
	}
    }
}

# Returns a shortened form of a URI
function shortURI(uriId) {
    split(uriId,uriIdArray,"-");
    return uriIdArray[2] "-" uriIdArray[3];
}

function makeZoneKey(initiatorWwn, portWwn) {
    initwwn = initiatorWwn;
    gsub(":", "", initwwn);
    portwwn = portWwn;
    gsub(":", "", portwwn);
    return initwwn  "_"  portwwn;
}


BEGIN	{
    debug=0;
    if (ARGC < 2) {
        print "usage: dumpex export_group_name";
        exit 1;
    }
    listBegRegex=".*\\[";
    listEndRegex="\\].*";
    invalidURICharRegex="[^0-9a-zA-Z:-]";
    argi=1;
    skip=0;
    if (ARGV[argi] ~ "-s") {
        skip=1;
        print "not generating files";
	argi++;
        print ARGV[argi];
    }
    groupName = ARGV[argi++];
    emmatch="all";
    if (argi < ARGC) {
        emmatch = ARGV[argi++];
    }
    print "EG: ", groupName, " EM: ", emmatch;
    if (!skip) {
        system("/opt/storageos/bin/dbutils list ExportGroup >/tmp/_eg");
        system("/opt/storageos/bin/dbutils list ExportMask >/tmp/_em");
        system("/opt/storageos/bin/dbutils list Initiator >/tmp/_init");
        system("/opt/storageos/bin/dbutils list StoragePort >/tmp/_port");
        system("/opt/storageos/bin/dbutils list FCZoneReference >/tmp/_zref");
    }
    groups["0"] = "0";
    parseEntries("/tmp/_eg", groups);
    parseEntries("/tmp/_em", masks);
    parseEntries("/tmp/_init", inits);
    parseEntries("/tmp/_port", ports);
    parseEntries("/tmp/_zref", zrefs);

    # Make initiator URI to WWN and to host maps
    for (init in inits) {
        if (init ~ "iniport") {
            wwn = inits[init];
            sub("iniport", "", init);
	    gsub(invalidURICharRegex, "", init);
            initiatorToWwn[init] = wwn;
            #print init, "->", wwn;
        }
	if (init ~ "hostname") {
	    host = inits[init];
	    sub("hostname", "", init);
	    gsub(invalidURICharRegex, "", init);
	    initiatorToHost[init] = host;
	}
    }
    if (debug) {
        for (init in initiatorToWwn) {
            printf("%s-->%s\n",  init, initiatorToWwn[init]);
        }
    }

    # Make port URI to portName and Wwn maps
    for (port in ports) {
        if (port ~ "portName") {
	    name = ports[port];
	    sub("portName", "", port);
	    gsub(invalidURICharRegex, "", port);
	    portToName[port] = name;
	    #print port, "->", name;
	}
	if (port ~ "portNetworkId") {
	    networkId = ports[port];
	    sub("portNetworkId", "", port);
	    gsub(invalidURICharRegex, "", port);
	    portToWwn[port] = networkId;
	}
    }
    # Make a zone pwwnKey to zoneName map.
    for (zref in zrefs) {
        if (zref ~ "zoneName") {
	    zname = zrefs[zref];
	    sub("zoneName", "", zref);
	    gsub(invalidURICharRegex, "", zref);
	    zoneToName[zref] = zname;
	}
    }
    for (zref in zrefs) {
        if (zref ~ "pwwnKey") {
	    pwwnKey = zrefs[zref];
	    sub("pwwnKey", "", zref);
	    gsub(invalidURICharRegex, "", zref);
	    zname=zoneToName[zref];
            #print "pwwnKey=", pwwnKey
	    pwwnKeyToZoneName[pwwnKey] = zname;
	    if (pwwnKey in pwwnKeyToCount) {
	        pwwnKeyToCount[pwwnKey]++;
	    } else {
	        pwwnKeyToCount[pwwnKey] = 1;
	    }
	}
    }
    if (debug) {
        for (port in portToName) {
            printf("%s-->%s\n", port, portToName[port]);
        }
        for (port in portToWwn) {
            printf("%s-->%s\n", port, portToWwn[port]);
        }
        for (pwwnKey in pwwnKeyToZoneName) {
	    printf("%s-->%s\n", pwwnKey, pwwnKeyToZoneName[pwwnKey]);
        }
    }

    // Find the Export Group requested
    groupuri=0;
    for (id in groups) {
        # print id;
	key=id;
	sub("urn:.*\\:(vdc.|global)","",key);
	#print "key= ", key;
	if (key ~ "label") {
	    label=groups[id];
	    #print "label = ", label;
	    if (label ~ groupName) {
	        groupuri=id;
	        sub("label$", "", groupuri);
                #printobj(groups, groupuri);
                getobj(groups, groupuri, egrp);
		exportMasks=egrp["exportMasks"];
		sub(listBegRegex, "", exportMasks);
		sub(listEndRegex, "", exportMasks);
		split(exportMasks, masklist, ", ");
		# For each mask in the EG
		printf("Hostname ... Initiator WWN ... Port Name ... Zone Name ... Count\n");
		for (maskid in masklist) {
                    getobj(masks, masklist[maskid], mask);
		    storageDevice = mask["storageDevice"];
                    maskName = mask["maskName"];
                    if (!(emmatch ~ "all") && !(maskName ~ emmatch)) continue;
		    sub("URI: ", "", storageDevice);
                    printf "eg %s em %s ssys %s\n", egrp["label"], maskName, storageDevice;
		    existingVols = mask["existingVolumes"]
		    if (existingVols != null) {
			print "Existing volumes: ", existingVols
		    }
		    zoneMap = mask["zoningMap"];
		    sub("{", "", zoneMap);
		    sub("}", "", zoneMap);
		    initiators=mask["initiators"];
		    sub(listBegRegex, "", initiators);
		    sub(listEndRegex, "", initiators);
		    storagePorts=mask["storagePorts"];
		    sub(listBegRegex, "", storagePorts);
		    sub(listEndRegex, "", storagePorts);
		    #print "storagePorts", storagePorts;
		    split(zoneMap, zoneMapTerms, "], ");
		    for (zoneMapTermId in zoneMapTerms) {
		        zoneMapTerm = zoneMapTerms[zoneMapTermId];
			initiatorId=zoneMapTerm;
			sub("=.*", "", initiatorId);
			gsub(invalidURICharRegex, "", initiatorId);
			initiatorWwn = initiatorToWwn[initiatorId];
			initiatorHost = initiatorToHost[initiatorId];
			initiatorstr = sprintf("%s %s %s ", initiatorHost, initiatorWwn, shortURI(initiatorId));
                        #print initiatorId, initiatorstr;
			if (initiators !~ shortURI(initiatorId)) {
			    printf("ERROR initiator %s not in mask initiators %s\n", shortURI(initiatorId), initiators);
			}
			portlist=zoneMapTerm;
			sub(".*=", "", portlist);
			sub(listBegRegex, "", portlist);
			sub(listEndRegex, "", portlist);
			split(portlist, portTerms, ", ")
			for (portTermId in portTerms) {
			     portid=portTerms[portTermId];
			     gsub(" ", "", portid);
			     portName=portToName[portid];
			     portWwn=portToWwn[portid];
			     zoneKey = makeZoneKey(initiatorWwn, portWwn);
			     #print "zoneKey: " , zoneKey;
			     gsub(" ", "", zoneKey);
			     zoneName = pwwnKeyToZoneName[zoneKey];
			     zoneCount = pwwnKeyToCount[zoneKey];
			     if (storagePorts !~ shortURI(portid)) {
			          printf("%s ERROR port %s not in storagePorts %s\n", initiatorstr, shortURI(portid), storagePorts);   
			     }
			     #printf("port %s %s\n", portid, portName);
			     printf("%s %s %s %s %d\n", initiatorstr, shortURI(portid), portName, zoneName, zoneCount);
			}
		    }
		    #initiators=mask["initiators"];
		    #sub(listBegRegex, "", initiators);
		    #sub(listEndRegex, "", initiators);
                    #split(initiators, initiatorlist, ", ");
		    #for (initid in initiatorlist) {
		    #    getobj(inits, initid, initiator);
		    #}
		}
	    }
	}
    }
    if (0) {
    for (zref in zrefs) {
        printf("zref %s %s\n", zref, zrefs[zref]);
    }
    }
    #system("rm /tmp/_eg");
    #system("rm /tmp/_em");
    #system("rm /tmp/_init");
    #system("rm /tmp/_port");
    #system("rm /tmp/_zref");
}
MYEND
