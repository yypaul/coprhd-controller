#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import Bourne

#----------------------------------------------------------------------
# storage cli functions
#----------------------------------------------------------------------

def storageport_delete(args):
    bourne.connect(args.ip)
    uri  = bourne.storageport_query(args.name)
    res = bourne.storageport_delete(uri)
    print res

def storageport_show(args):
    bourne.connect(args.ip)
    name = args.name
    (systemname, portname) = name.split('/', 1)
    systemuri  = bourne.storagedevice_query(systemname)
    porturi  = bourne.storageport_query(name)
    port = bourne.storageport_show(systemuri, porturi)
    print port

def storageport_query(args):
    bourne.connect(args.ip)
    print bourne.storageport_query(args.name)

def storageport_list(args):
    bourne.connect(args.ip)
    pguri  = bourne.storagedevice_querybynativeguid(args.storage)
    storageports = bourne.storageport_list(pguri)
    port_display_hdr(args)
    for p in storageports:
        id = p['id']
        port = bourne.storageport_show(pguri, id)
        if (args.v):
            port_display_v(port)
        elif (args.m):
            port_display_m(port)
        else:
            port_display(port)

def storageport_register(args):
    bourne.connect(args.ip)
    uri  = bourne.storagedevice_querybynativeguid(args.storage)
    porturis = bourne.storageport_list(uri)
    for porturi in porturis:
        sport = bourne.storageport_show(uri, porturi['id'])
        if (sport['transport_type'] == args.transportType):
            port = bourne.storageport_register(uri, porturi['id'])
            print port

def storageport_deregister(args):
    bourne.connect(args.ip)
    print bourne.storageport_deregister(args.name)

def storageport_get(args):
    bourne.connect(args.ip)
    name = args.name
    porturi  = bourne.storageport_query(name)
    port = bourne.storageport_get(porturi)
    print port


#----------------------
# transportType is required; only ports of that type will be updated.
# Optional arguments name or group may be used to qualify ports to be updated.
#----------------------
def storageport_update(args):
    bourne.connect(args.ip)
    uri  = bourne.storagedevice_querybynativeguid(args.storage)
    porturis = bourne.storageport_list(uri)
    try:
        group = args.group
    except:
        group = None
    try:
        name = args.name
    except:
        name = None
    for porturi in porturis:
        sport = bourne.storageport_show(uri, porturi['id'])
        if (sport['transport_type'] == args.transportType):
            try:
                if (group != None and name != None):
                    if (group == sport['port_group'] and name == sport['port_name']):
                        port = bourne.storageport_update(porturi['id'], args.tzone, args.addvarrays, args.rmvarrays)
                        print port['name'] 
                elif (group != None and group == sport['port_group']):
                    port = bourne.storageport_update(porturi['id'], args.tzone, args.addvarrays, args.rmvarrays)
                    print port['name'] 
                elif (name != None and name == sport['port_name']):
                    port = bourne.storageport_update(porturi['id'], args.tzone, args.addvarrays, args.rmvarrays)
                    print port['name'] 
                elif group == None and name == None:
                    port = bourne.storageport_update(porturi['id'], args.tzone, args.addvarrays, args.rmvarrays)
                    print port['name'] 
            except:
                print "ERROR:"
                print port

#
# display storage port in list form
#
port_display_fmt = '{0:4s} {1:16s} {2:16s} {3:40s} {4:64s} {5:s}'
port_display_v_fmt = '{0:16s} {1:4s} {2:16s} {3:50s} {4:16s} {5:9s} {6:30s} {7:s}'
port_display_m_fmt = '{0:16s} {1:50s} {2:12s} {3:12s} {4:12s} {5:12s} {6:12s} {7:s}'

def port_display_hdr(args):
    if (args.v):
        print port_display_v_fmt.format('name', 'group', 'type',  'address', 'alias', 'status', 'network', 'varrays')
    elif (args.m):
        print port_display_m_fmt.format('name', 'address', 'metric', 'initiators', 'volumes', 'port%busy', 'cpu%busy', 'network')
    else:
        print port_display_fmt.format('type', 'name', 'group', 'network id', 'alias', 'TZ')

def port_display(p):
    try:
        tz = p['network']['id']
    except:
        tz = '---'

    try:
        alias = p['port_alias']
    except:
        alias = '---'

    print port_display_fmt.format(p['transport_type'], p['port_name'], p['port_group'], p['port_network_id'], alias, tz)

def port_display_m(p):
    try:
        cpuBusy = "{0:04.1f}".format(p['cpu_percent_busy'])
    except:
        cpuBusy = '---'
    try:
        portBusy = "{0:04.1f}".format(p['port_percent_busy'])
    except:
        portBusy = '---'
    try:
        portMetric = "{0:04.1f}".format(p['allocation_metric'])
    except:
        portMetric = '---'
    try:
        volumeCnt = str(p['volume_load'])
    except:
        volumeCnt = '---'
    try:
        initiatorCnt = str(p['initiator_load'])
    except:
        initiatorCnt = '---'
    try:
        disqualified = str(p['allocation_disqualified'])
    except:
        disqualified = '---'
    try:
        tz = p['network']['id']
        net = bourne.transportzone_show(tz)
        network = net['name']
    except:
        network = '---'
        
    print port_display_m_fmt.format(p['port_name'], p['port_network_id'], portMetric, initiatorCnt, volumeCnt, portBusy, cpuBusy, network)


def port_display_v(p):
    network = ' '

    try:
        alias = p['port_alias']
    except:
        alias = '---'

    try:
        tz = p['network']['id']
        net = bourne.transportzone_show(tz)
        network = net['name']
        varrays = p['tagged_varrays']
        varraynames = ''
        for va in varrays:
            varraynames = varraynames + bourne.neighborhood_name(va) + ' ';
    except:
        network = '---'
        varraynames = ''
        
    print port_display_v_fmt.format(p['port_name'], p['port_group'], p['transport_type'], p['port_network_id'], alias, p['operational_status'], network, varraynames ) 


def storageport_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.storageport_query(args.name)
    print 'Tagging storageport ' +  args.id
    bourne.tag(args.resource_type, args.id, args.tags)

def storageport_search(args):
    bourne.connect(args.ip)
    if (args.scope != None):
        # query tenant id from tenant name
        args.scope = bourne.tenant_query(args.scope)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching storageport with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array


#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# storage <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne storage port cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | show | list | register | deregister | update | update_name | get)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# port register port
register = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
register.add_argument('storage',          help = 'Storage system where this port belongs')
register.add_argument('transportType',    help = 'Protocol FC or ISCSI')

# port update port
update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
update.add_argument('storage',          help = 'Storage system where this port belongs')
update.add_argument('transportType',    help = 'Protocol FC or ISCSI')
update.add_argument('--tzone',          help = 'Transport zone to which this port is physically connected')
update.add_argument('--group',          help = 'Group that should be processed')
update.add_argument('--name',           help = 'Port Name that should be processed')
update.add_argument('--addvarrays',     help = 'Add virtual array assignments')
update.add_argument('--rmvarrays',      help = 'Remove virtual array assignments')

# port list name
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
list.add_argument('storage',	help = 'storage system name')
list.add_argument('--m', action='store_true',	help = 'metrics info listing')
list.add_argument('--v', action='store_true',	help = 'verbose listing. If both options are specified, --v has precedent')

# port show name
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name',	help = 'storage port name');

# port delete name
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'storage port name');

# port query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name',	help = 'storage port name')

# port deregister name
deregister = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
deregister.add_argument('name',	help = 'storage port name')

# tag 
resource_type="storage_port"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
tag.add_argument('--id',     metavar = 'id',     help = 'resource id', default=None)
tag.add_argument('name',     metavar = 'name',   help = 'resource name')
tag.add_argument('tags',     metavar = 'tags',   help = 'tags', nargs='+', default=None)

# search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
search.add_argument('--scope',   metavar = 'scope',  help = 'scope(global or tenant) for searching', default=None)
search.add_argument('prefix',    metavar = 'prefix', help = 'prefix for search name or tag')
search.add_argument('--tag',     metavar = 'tag',    help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project',help = 'search name within project', default=None)

# port get name
get = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
get.add_argument('name',	help = 'storage port name');


#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "delete"):
        args = delete.parse_args()
        storageport_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        storageport_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        storageport_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        storageport_list(args)
    elif (cmd == "register"):
        args = register.parse_args()
        storageport_register(args) 
    elif (cmd == "deregister"):
        args = deregister.parse_args()
        storageport_deregister(args) 
    elif (cmd == "update"):
        args = update.parse_args()
        storageport_update(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        storageport_tag(args)
    elif(cmd == "search"):
        args = search.parse_args()
        storageport_search(args)
    elif(cmd == "get"):
        args = get.parse_args()
        storageport_get(args)
    else:
        parser.print_help()
except:
    raise

